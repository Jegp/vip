from sklearn.externals import joblib
import cv2
import numpy as np
#import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
import os
import itertools
from sklearn.externals import joblib
from sklearn.feature_extraction.text import TfidfVectorizer
import matplotlib.pyplot as plt
import numpy as np

# Find and return descriptors for given image
def descriptors(image):
	print(type(image))
	gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
	sift = cv2.xfeatures2d.SIFT_create()
	kp, des = sift.detectAndCompute(gray,None)
	return des

# Training function, takes descriptor array and number for K-mean
def train(k,des_array):
	km = KMeans(n_clusters = k)
	km.fit(des_array)
	return km

# Retrieve files into training and test sets
def splitFilesInDirectory(dir):
	files = os.listdir(dir)
	length = len(files)
	training_files = [(cv2.imread(dir + '/' + img),img, dir, True) for img in files[length // 2:] if img[0] != "."]
	test_files = [(cv2.imread(dir + '/' + img),img, dir, False) for img in files[:length // 2] if img[0] != "."]
	return (training_files, test_files)

# Populates table
def populateTable(categories,k):
	training_data = []
	test_data = []
	for category in categories:
		training_images, test_images = splitFilesInDirectory('categories/'+category)
		training_data = training_data + training_images
		test_data = test_data + test_images

	return list(itertools.chain(*[descriptors(img[0]) for img in training_data]))


cats = ['bass','accordion']
training_des_array = populateTable('bass',1)







table = joblib.load('data/750_8/table_750_8.pkl')
print(training_des_array[0])


def finding_elbow(data, minimum=100,maximum=110):
    x_axis = []
    y_axis = []
    for i in range(minimum,maximum):
        kmeans = KMeans(n_clusters = i)
        kmeans.fit(des)
        x_axis.append(i)
        y_axis.append(kmeans.inertia_)
        return x_axis, y_axis
#x,y = finding_elbow(des)


#plt.plot(x, y, linewidth=2.0)
#plt.show()